import logging
import sys
import requests
from telegram import ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, ConversationHandler, filters
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardRemove

BOT_TOKEN = "6674667829:AAFJX5J8TLRjbLYaLL4nbRkXmYVZsYr6pTo"
URL = 'https://api.telegram.org/bot'

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

logger = logging.getLogger(__name__)

reply_keyboard = [['/address'],
                  ['/help']]

reply_keyboard1 = [['—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'], ['–ø—Ä–∏—Ä–æ–¥–∞'], ['–µ–¥–∞'], ['–∫—É–ª—å—Ç—É—Ä–∞']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
markup1 = ReplyKeyboardMarkup(reply_keyboard1, one_time_keyboard=True)


def get_culture_info(lat, lon):
    culture_info = set()
    url = f"https://api.geoapify.com/v2/places?categories=entertainment.culture&filter=circle:{lon},{lat},50000&bias=proximity:{lon},{lat}&limit=20&apiKey=23b70e7a81254e459c88d574598a37ab"
    response = requests.get(url).json()
    for i in response['features']:
        try:
            culture_info.add(
                (i['properties']['name'], i['properties']['website'], i['properties']['lon'], i['properties']['lat']))
        except:
            pass
    return culture_info


def get_nuturel_info(lat, lon):
    f = set()
    cat = [('entertainment.zoo', 3), ('entertainment.planetarium', 3), ('natural', 10)]
    for i in cat:
        url = f"https://api.geoapify.com/v2/places?categories={i[0]}&filter=circle:{lon},{lat},50000&bias=proximity:{lon},{lat}&limit={i[-1]}&apiKey=23b70e7a81254e459c88d574598a37ab"
        response = requests.get(url)
        info = response.json()
        for j in info['features']:
            try:
                f.add((j['properties']['name'], j['properties']['website'], j['properties']['lon'],
                       j['properties']['lat']))
            except:
                pass
    return f


def get_food_info(lat, lon):
    food_info = set()
    url = f"https://api.geoapify.com/v2/places?categories=catering.restaurant&filter=circle:{lon},{lat},10000&bias=proximity:{lon},{lat}&limit=20&apiKey=23b70e7a81254e459c88d574598a37ab"
    response = requests.get(url)
    for i in response.json()['features']:
        try:
            food_info.add(
                (i['properties']['name'], i['properties']['website'], i['properties']['lon'], i['properties']['lat']))
        except:
            pass
    url_2 = f"https://api.geoapify.com/v2/places?categories=catering.fast_food&filter=circle:{lon},{lat},10000&bias=proximity:{lon},{lat}&limit=20&apiKey=23b70e7a81254e459c88d574598a37ab"
    response_2 = requests.get(url_2)
    for j in response_2.json()['features']:
        try:
            food_info.add(
                (j['properties']['name'], j['properties']['website'], j['properties']['lon'], j['properties']['lat']))
        except:
            pass
    url_3 = f"https://api.geoapify.com/v2/places?categories=catering.cafe&filter=circle:{lon},{lat},10000&bias=proximity:{lon},{lat}&limit=20&apiKey=23b70e7a81254e459c88d574598a37ab"
    response_3 = requests.get(url_3)
    for l in response_3.json()['features']:
        try:
            food_info.add(
                (l['properties']['name'], l['properties']['website'], l['properties']['lon'], l['properties']['lat']))
        except:
            pass
    return food_info


def get_entertainment_info(lat, lon):
    entertainment_info = set()
    url = f"https://api.geoapify.com/v2/places?categories=entertainment.cinema&filter=circle:{lon},{lat},10000&bias=proximity:{lon},{lat}&limit=20&apiKey=23b70e7a81254e459c88d574598a37ab"
    response = requests.get(url)
    for j in response.json()['features']:
        try:
            entertainment_info.add(
                (j['properties']['name'], j['properties']['website'], j['properties']['lon'], j['properties']['lat']))
        except:
            pass
    url_2 = f"https://api.geoapify.com/v2/places?categories=entertainment.water_park&filter=circle:{lon},{lat},10000&bias=proximity:{lon},{lat}&limit=20&apiKey=23b70e7a81254e459c88d574598a37ab"
    response_2 = requests.get(url_2)
    for i in response_2.json()['features']:
        try:
            entertainment_info.add(
                (i['properties']['name'], i['properties']['website'], i['properties']['lon'], i['properties']['lat']))
        except:
            pass
    return entertainment_info


async def start(update, context):
    await update.message.reply_text(
        "–Ø –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫. –ü–æ–º–æ–≥—É –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è —Å –º–µ—Å—Ç–æ–º, –≤ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å —ç—Ç–∏–º, –ø–æ—Å–ª–∞–≤ –∫–æ–º–∞–Ω–¥—É /stop.\n"
        "–û—Ç–ø—Ä–∞–≤—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!‚ù§Ô∏è", reply_markup=ReplyKeyboardRemove()
    )
    return 1


async def receive_location(update, context):
    locat = update.message.location
    context.user_data['locality'] = update.message.text
    loc = str(locat).lstrip('Location').strip('()').split('=')
    del loc[0]
    l = ' '.join(loc).split(', longitude ')
    context.user_data['locality'] = (float(l[0]), float(l[1]))
    await update.message.reply_text("–ú—ã –Ω–∞—à–ª–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º –º–µ—Å—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ö–æ–¥–∏—Ç—å.\n"
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Å—Ç–∞",
                                    reply_markup=markup1)
    return 2


async def second_response(update, context):
    # –û—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å.
    # –ú—ã –º–æ–∂–µ–º –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫—É–¥–∞-–ª–∏–±–æ.
    weather = update.message.text
    locat = context.user_data['locality']
    flag = True
    if weather == '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è':
        entert_lst = list(get_entertainment_info(locat[0], locat[-1]))
        print(entert_lst)
        map_request = f"http://static-maps.yandex.ru/1.x/?pt={locat[-1]},{locat[0]},home~{entert_lst[0][2]},{entert_lst[0][3]},pm2gnm~{entert_lst[1][2]},{entert_lst[1][3]},pm2rdm~{entert_lst[2][2]},{entert_lst[2][3]},pm2lbm&l=map"
        response = requests.get(map_request)

        if not response:
            print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:")
            print(map_request)
            print("Http —Å—Ç–∞—Ç—É—Å:", response.status_code, "(", response.reason, ")")
            sys.exit(1)
        map_file = "map.png"
        with open(map_file, "wb") as file:
            file.write(response.content)
        await update.message.reply_photo(map_file)
        await update.message.reply_text(f'–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –≤–∞—Å:\n'
                                        f'üü¢{entert_lst[0][0]}\n'
                                        f'  {entert_lst[0][1]}\n'
                                        f'üî¥{entert_lst[1][0]}\n'
                                        f'  {entert_lst[1][1]}\n'
                                        f'üîµ{entert_lst[2][0]}\n'
                                        f'  {entert_lst[2][1]}\n')

    elif weather == '–ø—Ä–∏—Ä–æ–¥–∞':
        nature_lst = list(get_nuturel_info(locat[0], locat[-1]))
        map_request = f"http://static-maps.yandex.ru/1.x/?pt={locat[-1]},{locat[0]},home~{nature_lst[0][2]},{nature_lst[0][3]},pm2gnm~{nature_lst[1][2]},{nature_lst[1][3]},pm2rdm~{nature_lst[2][2]},{nature_lst[2][3]},pm2lbm&l=map"
        response = requests.get(map_request)

        if not response:
            print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:")
            print(map_request)
            print("Http —Å—Ç–∞—Ç—É—Å:", response.status_code, "(", response.reason, ")")
            sys.exit(1)
        map_file = "map.png"
        with open(map_file, "wb") as file:
            file.write(response.content)
        await update.message.reply_photo(map_file)
        await update.message.reply_text(f'–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏—Ä–æ–¥–æ–π, –¥–ª—è –≤–∞—Å:\n'
                                        f'üü¢{nature_lst[0][0]}\n'
                                        f'  {nature_lst[0][1]}\n'
                                        f'üî¥{nature_lst[1][0]}\n'
                                        f'  {nature_lst[1][1]}\n'
                                        f'üîµ{nature_lst[2][0]}\n'
                                        f'  {nature_lst[2][1]}\n'
                                        )
    elif weather == '–µ–¥–∞':
        eat_lst = list(get_food_info(locat[0], locat[-1]))
        map_request = f"http://static-maps.yandex.ru/1.x/?pt={locat[-1]},{locat[0]},home~{eat_lst[0][2]},{eat_lst[0][3]},pm2gnm~{eat_lst[1][2]},{eat_lst[1][3]},pm2rdm~{eat_lst[2][2]},{eat_lst[2][3]},pm2lbm&l=map"
        response = requests.get(map_request)

        if not response:
            print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:")
            print(map_request)
            print("Http —Å—Ç–∞—Ç—É—Å:", response.status_code, "(", response.reason, ")")
            sys.exit(1)
        map_file = "map.png"
        with open(map_file, "wb") as file:
            file.write(response.content)
        await update.message.reply_photo(map_file)
        await update.message.reply_text(f'–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–µ—Å—Ç—å:\n'
                                        f'üü¢{eat_lst[0][0]}\n'
                                        f'  {eat_lst[0][1]}\n'
                                        f'üî¥{eat_lst[1][0]}\n'
                                        f'  {eat_lst[1][1]}\n'
                                        f'üîµ{eat_lst[2][0]}\n'
                                        f'  {eat_lst[2][1]}\n')
    elif weather == '–∫—É–ª—å—Ç—É—Ä–∞':
        cultur_lst = list(get_culture_info(locat[0], locat[-1]))
        map_request = f"http://static-maps.yandex.ru/1.x/?pt={locat[-1]},{locat[0]},home~{cultur_lst[0][2]},{cultur_lst[0][3]},pm2gnm~{cultur_lst[1][2]},{cultur_lst[1][3]},pm2rdm~{cultur_lst[2][2]},{cultur_lst[2][3]},pm2lbm&l=map"
        response = requests.get(map_request)
        if not response:
            print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:")
            print(map_request)
            print("Http —Å—Ç–∞—Ç—É—Å:", response.status_code, "(", response.reason, ")")
            sys.exit(1)
        map_file = "map.png"
        with open(map_file, "wb") as file:
            file.write(response.content)
        await update.message.reply_photo(map_file)
        await update.message.reply_text(f'–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–µ—Å—Ç—å:\n'
                                        f'üü¢{cultur_lst[0][0]}\n'
                                        f'  {cultur_lst[0][1]}\n'
                                        f'üî¥{cultur_lst[1][0]}\n'
                                        f'  {cultur_lst[1][1]}\n'
                                        f'üîµ{cultur_lst[2][0]}\n'
                                        f'  {cultur_lst[2][1]}\n')
    else:
        flag = False
        await update.message.reply_text(
            "–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
    logger.info(weather)
    if flag:
        await update.message.reply_text("–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop.",
                                        reply_markup=markup1)


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def close_keyboard(update, context):
    await update.message.reply_text(
        "Ok",
        reply_markup=ReplyKeyboardRemove()
    )


async def help(update, context):
    await update.message.reply_text(
        "–Ø –±–æ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫.")


def main():
    conv_handler = ConversationHandler(
        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /start. –û–Ω–∞ –∑–∞–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
        entry_points=[CommandHandler('start', start)],

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞.
        # –í–∞—Ä–∏–∞–Ω—Ç —Å –¥–≤—É–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        states={
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞—ë—Ç –≤—Ç–æ—Ä–æ–π.
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_response)],
        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
        fallbacks=[CommandHandler('stop', stop)]
    )
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(None, receive_location))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("close", close_keyboard))
    application.run_polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
